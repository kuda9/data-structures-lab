NAME: BOYD BWALYA KAOMA
ROLL NUMBER: 14
REGISTRATION NO: 11917491
 
Program to delete 5th element from a one-way list find its factorial and then add it as a last node 

#include<stdio.h>
#include<stdlib.h>
struct node
{
        int info;
        struct node *next;

};
struct node *start=NULL;
void create();
void insert_begin();
void insert_pos();
void display();
void delete_end();
void factorial();
int main()
{
        int choice;
        while(1){
                printf("\n 1. To Create linked list ");
                printf("\n 2. Insert at the beginning ");
                printf("\n 3. insert after a position node");
                printf("\n 4. To display elements in linked list ");
                printf("\n 5. Delete from specified position     \n");
                printf("\n 7. find the factorial ");
                printf("\n 6. Exit       \n");
                printf("Enter your choice:\t");
                scanf("%d",&choice);
                switch(choice)
                {
                        case 1:
                                        create();
                                        break;
                        case 2:
                                        insert_begin();
                                        break;
                       case 3:
                                        insert_pos();
                                        break;
                       case 4:
                                        display();
                                        break;
                        case 5:
                                        delete_end();
                                        break;
                        case 6:
                                        exit(0);
                                        break;
                        case 7:
                                        factorial();
                                        break;
                        default:
                                        printf("\n Your Choice is WRONG:\n");
                                        break;
                }
        }
        return 0;
}
void create()
{
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\n NO Memory Space Available:\n");
                exit(0);
        }
        printf("\nEnter the data value for the node:\t");
        scanf("%d",&temp->info);
        temp->next=NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                ptr=start;
                while(ptr->next!=NULL)
                {
                        ptr=ptr->next;
                }
                ptr->next=temp;
        }
}
void display()
{
        struct node *ptr;
        if(start==NULL)
        {
                printf("\nList is empty:\n");
                return;
        }
        else
        {
                ptr=start;
                printf("\nThe List elements are:\n");
                while(ptr!=NULL)
                {
                        printf("%d\t",ptr->info );
                        ptr=ptr->next ;
                }
        }
}
void insert_begin()
{
        struct node *temp;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\nOut of Memory Space:\n");
                return;
        }
        printf("\nEnter the data value for the node:\t" );
        scanf("%d",&temp->info);
        temp->next =NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                temp->next=start;
                start=temp;
        }
}
void insert_pos()
{
        struct node *ptr,*temp;
        int i,pos;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("\nOut of Memory Space:\n");
                return;
        }
        printf("\nEnter the position for the new node to be inserted:\t");
        scanf("%d",&pos);
        printf("\nEnter the data value of the node:\t");
        scanf("%d",&temp->info) ;

        temp->next=NULL;
        if(pos==0)
        {
                temp->next=start;
                start=temp;
        }
        else
        {
                for(i=0,ptr=start;i<pos-1;i++)
                {
                        ptr=ptr->next;
                        if(ptr==NULL)
                        {
                                printf("\nPosition not found:\n");
                                return;
                        }
                }
                temp->next =ptr->next ;
                ptr->next=temp;
        }
}
void delete_end()
{
        struct node *temp,*ptr;
        if(start==NULL)
        {
                printf("\nList is Empty:");
                exit(0);
        }
        else if(start->next ==NULL)
        {
                ptr=start;
                start=NULL;
                printf("\nThe deleted element is:%d\t",ptr->info);
                free(ptr);
        }
        else
        {
                ptr=start;
                while(ptr->next!=NULL)
                {
                        temp=ptr;
                        ptr=ptr->next;
                }
                temp->next=NULL;
                printf("\nThe deleted element is:%d\t",ptr->info);
                free(ptr);
        }
}
void factorial()
{
    int fact,n;
    struct node *ptr;
    if(ptr==NULL)
    {

    printf("\nList is Empty:\n ");
return ;
    }
else
{

    ptr=start;
    start=start->next;
    start=n;
    fact=fact*(n-1);
    printf("\n The factorial of :%d is %d",ptr->info,fact);
    return;
}
}
